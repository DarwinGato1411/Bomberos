-- FUNCTION: public.f_numerosletras(numeric)

-- DROP FUNCTION IF EXISTS public.f_numerosletras(numeric);

CREATE OR REPLACE FUNCTION public.f_numerosletras(
	num numeric)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
-- Función que devuelve la cadena de texto en castellano que corresponde a un número.
-- Parámetros: número con 2 decimales, máximo 999.999.999,99.

DECLARE	
	d varchar[];
	f varchar[];
	g varchar[];
	numt varchar;
	txt varchar;
	a integer;
	a1 integer;
	a2 integer;
	n integer;
	p integer;
	negativo boolean;
BEGIN
	-- Máximo 999.999.999,99
	if num > 999999999.99 then
		return '---';
	end if;
	txt = '';
	d = array[' UNO',' DOS',' TRES',' CUATRO',' CINCO',' SEIS',' SIETE',' OCHO',' NUEVE',' DIEZ',' ONCE',' DOCE',' TRECE',' CATORCE',' QUINCE',
		' DIECISEIS',' DIECISIETE',' DIECIOCHO',' DICIENUEVE',' VEINTE',' VEINTIUN',' VEINTIDOS', ' VEINTITRES', ' VEINTICUATRO', ' VEINTICINCO',
		' VENTISEIS',' VEINTISIETE',' VENTIOCHO',' VEINTINUEVE'];
	f = array ['','',' TREINTA',' CUARENTA',' CINCUENTA',' SESENTA',' SETENTA',' OCHENTA', ' NOVENTA'];
	g= array [' CIENTO',' DOSCIENTOS',' TRECIENTOS',' CUATROCIENTOS',' QUINIENTOS',' SEISCIENTOS',' SETECIENTOS',' OCHOCIENTOS',' NOVEIENTOS'];
	numt = lpad((num::numeric(12,2))::text,12,'0');
	if strpos(numt,'-') > 0 then
	   negativo = true;
	else
	   negativo = false;
	end if;
	numt = translate(numt,'-','0');
	numt = translate(numt,'.,','');
	-- Trato 4 grupos: MILLONES, MILES, UNIDADES y DECIMALES
	p = 1;
	for i in 1..4 loop
		if i < 4 then
			n = substring(numt::text from p for 3);
		else
			n = substring(numt::text from p for 2);
		end if;
		p = p + 3;
		if i = 4 then
			if txt = '' then
				txt = ' CERO';
			end if;
			if n > 0 then
			-- Empieza con los decimales
				txt = txt || ' con';
			end if;
		end if;
		-- CENTENAS
		if n > 99 then
			a = substring(n::text from 1 for 1);
			a1 = substring(n::text from 2 for 2);
			if a = 1 then
				if a1 = 0 then
					txt = txt || ' CIEN';
				else
					txt = txt || ' CIENTO';
				end if;
			else
				txt = txt || g[a];
			end if;
		else
			a1 = n;
		end if;
		-- DECENAS
		a = a1;
		if a > 0 then
			if a < 30 then
				if a = 21 and (i = 3 or i = 4) then
					txt = txt || ' VEINTIUNO';
				elsif n = 1 and i = 2 then
					txt = txt; 
				elsif a = 1 and (i = 3 or i = 4)then
					txt = txt || ' UNO';
				else
					txt = txt || d[a];
				end if;
			else
				a1 = substring(a::text from 1 for 1);
				a2 = substring(a::text from 2 for 1);
				if a2 = 1 and (i = 3 or i = 4) then
						txt = txt || f[a1] || ' y' || ' UNO';
				else
					if a2 <> 0 then
						txt = txt || f[a1] || ' y' || d[a2];
					else
						txt = txt || f[a1];
					end if;
				end if;
			end if;
		end if;
		if n > 0 then
			if i = 1 then
				if n = 1 then
					txt = txt || ' MILLONES';
				else
					txt = txt || ' MILLONES';
				end if;
			elsif i = 2 then
				txt = txt || ' MIL';
			end if;		
		end if;
	end loop;
	txt = ltrim(txt);
	if negativo = true then
	   txt= '-' || txt;
	end if;
    RETURN txt;
END;
$BODY$;

ALTER FUNCTION public.f_numerosletras(numeric)
    OWNER TO postgres;


---crear nuevas columnas
-- Column: public.cobro.cob_impuesto_predial_cobro

-- ALTER TABLE IF EXISTS public.cobro DROP COLUMN IF EXISTS cob_impuesto_predial_cobro;

ALTER TABLE IF EXISTS public.cobro
    ADD COLUMN cob_impuesto_predial_cobro numeric(10,4);
	
	
	
	-- Column: public.solicitud_permiso.solp_impuesto_predial_valor

-- ALTER TABLE IF EXISTS public.solicitud_permiso DROP COLUMN IF EXISTS solp_impuesto_predial_valor;

ALTER TABLE IF EXISTS public.solicitud_permiso
    ADD COLUMN solp_impuesto_predial_valor numeric(8,4);
	
-- Column: public.cobro.cob_impuesto_predial

-- ALTER TABLE public.cobro DROP COLUMN cob_impuesto_predial;

ALTER TABLE public.cobro
    ADD COLUMN cob_impuesto_predial numeric(8,2);
	
	-- Column: public.inspeccion.ins_impuesto_predial

-- ALTER TABLE public.inspeccion DROP COLUMN ins_impuesto_predial;

ALTER TABLE public.inspeccion
    ADD COLUMN ins_impuesto_predial numeric(8,2);
	
	
	-- Column: public.solicitud_permiso.solp_impuesto_predial

-- ALTER TABLE public.solicitud_permiso DROP COLUMN solp_impuesto_predial;

ALTER TABLE public.solicitud_permiso
    ADD COLUMN solp_impuesto_predial numeric(8,2);
	
	-- Column: public.tarifa.tar_valor_text

-- ALTER TABLE IF EXISTS public.tarifa DROP COLUMN IF EXISTS tar_valor_text;

ALTER TABLE IF EXISTS public.tarifa
    ADD COLUMN tar_valor_text character varying(150) COLLATE pg_catalog."default";
	
	
	
	




